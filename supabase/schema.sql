-- Create waitlist table to store emails of interested users.
CREATE TABLE IF NOT EXISTS public.waitlist (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email TEXT NOT NULL UNIQUE,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- RLS policy for waitlist: anyone can add their email.
ALTER TABLE public.waitlist ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Enable insert for anyone" ON public.waitlist;
CREATE POLICY "Enable insert for anyone" ON public.waitlist FOR INSERT WITH CHECK (true);

-- RLS policy for reading waitlist: only authenticated users can read.
-- This is a simplification for the admin page. In production, you'd want a proper role check.
DROP POLICY IF EXISTS "Enable read for authenticated users" ON public.waitlist;
CREATE POLICY "Enable read for authenticated users" ON public.waitlist FOR SELECT USING (auth.role() = 'authenticated');


-- Create site_settings table for dynamic configuration.
CREATE TABLE IF NOT EXISTS public.site_settings (
  key TEXT PRIMARY KEY,
  value TEXT,
  description TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- RLS policy for site_settings: anyone can read them.
ALTER TABLE public.site_settings ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Enable read for anyone" ON public.site_settings;
CREATE POLICY "Enable read for anyone" ON public.site_settings FOR SELECT USING (true);

-- RLS policy for updating settings: only authenticated users.
-- The server action will provide the real security layer on top of this.
DROP POLICY IF EXISTS "Enable update for authenticated users" ON public.site_settings;
CREATE POLICY "Enable update for authenticated users" ON public.site_settings FOR UPDATE USING (auth.role() = 'authenticated');

-- Function to automatically update the 'updated_at' timestamp.
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for site_settings table to auto-update timestamp.
DROP TRIGGER IF EXISTS on_site_settings_update ON public.site_settings;
CREATE TRIGGER on_site_settings_update
  BEFORE UPDATE ON public.site_settings
  FOR EACH ROW
  EXECUTE PROCEDURE public.update_updated_at_column();

-- Seed initial data for site_settings if it doesn't exist.
INSERT INTO public.site_settings (key, value, description)
VALUES ('launchDate', '2026-01-01T00:00:00Z', 'The target date for the official platform launch.')
ON CONFLICT (key) DO NOTHING;
