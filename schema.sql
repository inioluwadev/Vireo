-- Vireo Platform Database Schema
-- This file contains all the SQL statements needed to set up the PostgreSQL database on Supabase.
-- It is organized by the phased rollout plan.

-- =============================================
-- Phase 0: Initial Setup & Waitlist (Current)
-- =============================================

-- Table for the pre-launch waitlist.
CREATE TABLE
  public.waitlist (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    CONSTRAINT waitlist_pkey PRIMARY KEY (id),
    CONSTRAINT waitlist_email_key UNIQUE (email)
  );

-- Add comments for clarity
COMMENT ON TABLE public.waitlist IS 'Stores email addresses for the pre-launch waitlist.';
COMMENT ON COLUMN public.waitlist.email IS 'The user''s email address.';

-- Enable Row Level Security (RLS)
ALTER TABLE public.waitlist ENABLE ROW LEVEL SECURITY;

-- Policies for waitlist table
-- For now, we allow public inserts, as this is for a pre-launch waitlist form.
CREATE POLICY "Public can insert their own email" ON public.waitlist FOR INSERT
WITH
  CHECK (TRUE);


-- =============================================
-- Batch 1: User Management (July-Aug 2025)
-- =============================================

-- Custom types (enums) for user role and status to ensure data consistency.
CREATE TYPE public.user_role AS ENUM ('Admin', 'Student', 'Architect', 'Client');
CREATE TYPE public.user_status AS ENUM ('Active', 'Banned');

-- Profiles table to store public user data.
-- This table is linked to the `auth.users` table provided by Supabase Auth.
CREATE TABLE
  public.profiles (
    id UUID NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE NULL,
    name TEXT NULL,
    email TEXT NULL,
    avatar_url TEXT NULL,
    role public.user_role NOT NULL DEFAULT 'Student'::user_role,
    status public.user_status NOT NULL DEFAULT 'Active'::user_status,
    CONSTRAINT profiles_pkey PRIMARY KEY (id),
    CONSTRAINT profiles_email_key UNIQUE (email),
    CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users (id) ON DELETE CASCADE
  );

-- Add comments
COMMENT ON TABLE public.profiles IS 'Stores public profile information for each user.';
COMMENT ON COLUMN public.profiles.id IS 'References the user in Supabase''s auth.users table.';

-- Enable RLS for profiles table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Policies for profiles table
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR
SELECT
  USING (TRUE);

CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT
WITH
  CHECK (auth.uid () = id);

CREATE POLICY "Users can update their own profile." ON public.profiles FOR
UPDATE USING (auth.uid () = id);

CREATE POLICY "Admins have full access." ON public.profiles FOR ALL USING (
  (
    SELECT
      role
    FROM
      public.profiles
    WHERE
      id = auth.uid ()
  ) = 'Admin'::user_role
)
WITH
  CHECK (
    (
      SELECT
        role
      FROM
        public.profiles
      WHERE
        id = auth.uid ()
    ) = 'Admin'::user_role
  );


-- Function and Trigger to create a new profile entry when a user signs up.
-- This keeps the `public.profiles` table in sync with `auth.users`.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email, name, avatar_url)
  VALUES (new.id, new.email, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users FOR EACH ROW
EXECUTE PROCEDURE public.handle_new_user();


-- =============================================
-- Batch 2: Content Management (Sep-Oct 2025)
-- =============================================

-- Courses table for Vireo Academy
CREATE TABLE
  public.courses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    title TEXT NOT NULL,
    description TEXT NULL,
    author_id UUID NULL,
    CONSTRAINT courses_pkey PRIMARY KEY (id),
    CONSTRAINT courses_author_id_fkey FOREIGN KEY (author_id) REFERENCES public.profiles (id) ON DELETE SET NULL
  );

-- Forum posts table for Vireo Connect
CREATE TABLE
  public.forum_posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    title TEXT NOT NULL,
    content TEXT NULL,
    author_id UUID NOT NULL,
    CONSTRAINT forum_posts_pkey PRIMARY KEY (id),
    CONSTRAINT forum_posts_author_id_fkey FOREIGN KEY (author_id) REFERENCES public.profiles (id) ON DELETE CASCADE
  );

-- Enable RLS and set up policies (example)
ALTER TABLE public.courses ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Courses are viewable by everyone." ON public.courses FOR SELECT USING (TRUE);
-- Add more policies for insert/update/delete for admins.

ALTER TABLE public.forum_posts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Forum posts are viewable by everyone." ON public.forum_posts FOR SELECT USING (TRUE);
-- Add more policies for insert/update/delete for authenticated users and admins.

-- =============================================
-- Batch 3: Feature Toggles (Nov-Dec 2025)
-- =============================================

-- Table to manage platform features.
CREATE TABLE
  public.feature_toggles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name TEXT NOT NULL,
    is_enabled BOOLEAN NOT NULL DEFAULT FALSE,
    description TEXT NULL,
    CONSTRAINT feature_toggles_pkey PRIMARY KEY (id),
    CONSTRAINT feature_toggles_name_key UNIQUE (name)
  );

-- Enable RLS and set up policies (example)
ALTER TABLE public.feature_toggles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Feature toggles are viewable by everyone." ON public.feature_toggles FOR SELECT USING (TRUE);
CREATE POLICY "Admins can manage feature toggles." ON public.feature_toggles FOR ALL USING (
  (
    SELECT
      role
    FROM
      public.profiles
    WHERE
      id = auth.uid ()
  ) = 'Admin'::user_role
);


-- =============================================
-- Batch 4: Analytics & Advanced Controls (Dec 2025-Jan 2026)
-- =============================================

-- Example table for job bids, which could be used for analytics.
CREATE TABLE
  public.job_bids (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    user_id UUID NOT NULL,
    job_id BIGINT NOT NULL, -- Assuming a 'jobs' table would exist
    amount NUMERIC NOT NULL,
    CONSTRAINT job_bids_pkey PRIMARY KEY (id),
    CONSTRAINT job_bids_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles (id) ON DELETE CASCADE
  );

-- Enable RLS for job_bids
ALTER TABLE public.job_bids ENABLE ROW LEVEL SECURITY;

-- Note on Analytics:
-- Much of the analytics will come from running aggregate queries on existing tables like `profiles`, `courses`, `job_bids`, etc.
-- For example: `SELECT COUNT(*) FROM auth.users WHERE created_at >= 'YYYY-MM-DD';`
